<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="GoodsMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap type="kr.co.poppy.model.Goods" id="goodsMap">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="goodsno" column="goodsno" />
		<result property="gcode" column="gcode" />
		<result property="gname" column="gname" />
		<result property="ginfo" column="ginfo" />
		<result property="gprice" column="gprice" />
		<result property="gsale" column="gsale" />
		<result property="gdate" column="gdate" />
		<result property="cate1" column="cate1" />
		<result property="cate2" column="cate2" />
		<result property="regdate" column="regdate" />
		<result property="editdate" column="editdate" />
		<result property="gddetailno" column="gddetailno" />
	</resultMap>

	<!-- 상품상세 페이지 단일행 조회를 위한 기능 정의 -->
	<select id="selectItem" parameterType="kr.co.poppy.model.Goods"
		resultMap="goodsMap">
		SELECT i.imgname, i.imgtype, i.imgpath, imgext, count(h.heartno),
		gd.gdoption, g.gcode, g.gname, g.ginfo, g.gprice, g.gsale
		FROM goods g
		INNER JOIN imgs i ON g.goodsno = i.goodsno
		INNER JOIN heart h ON g.goodsno = h.goodsno
		INNER JOIN goodsdetail gd ON g.goodsno = gd.goodsno
		WHERE g.goodsno = ${goodsno} AND i.imgtype = "A";
	</select>

	<!-- 다중행 조회를 위한 기능 정의 -->
	<select id="selectList" parameterType="kr.co.poppy.model.Goods"
		resultMap="goodsMap">
		SELECT goodsno, gcode, gname, ginfo, gprice, gsale, gdate,
		cate1,
		cate2, regdate, editdate FROM goods
		WHERE cate1=#{cate1}
	</select>

	<!-- 데이터 수 조회를 위한 기능 정의 -->
	<select id="selectCountAll"
		parameterType="kr.co.poppy.model.Goods" resultType="int">
		SELECT COUNT(*)
		FROM goods
		WHERE cate1=#{cate1}
	</select>

	<!-- 정렬방식에 따른 조회 기능 정의 -->
	<select id="selectRange" parameterType="kr.co.poppy.model.Goods"
		resultMap="goodsMap">
		SELECT goodsno, gcode, gname, ginfo, gprice, gsale, gdate,
		cate1, cate2, regdate, editdate
		FROM goods
		ORDER BY gname desc
	</select>

	<!-- 데이터 저장을 위한 기능 정의 -->
	<insert id="insertItem" parameterType="kr.co.poppy.model.Goods"
		useGeneratedKeys="true" keyProperty="goodsno">
		INSERT INTO goods(gcode, gname,
		ginfo, gprice, gsale, gdate, cate1, cate2, regdate, editdate)
		VALUES
		(#{gcode}, #{gname}, #{ginfo}, #{gprice}, #{gsale}, #{gdate},
		#{cate1}, #{cate2}, #{regdate}, #{editdate});
	</insert>

	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="updateItem" parameterType="kr.co.poppy.model.Goods">
		UPDATE goods SET
		gcode =
		#{gcode}, gname = #{gname}, ginfo = #{ginfo}, gprice = #{gprice},
		gsale = #{gsale}, gdate = #{gdate}, cate1 = #{cate1}, cate2 =
		#{cate2}, editdate = #{editdate}
		WHERE goodsno = #{goodsno}
	</update>

	<!-- 상품 데이터 삭제를 위한 외부 테이블의 수정 및 삭제 -->
	<update id="updateItem_bbs"
		parameterType="kr.co.poppy.model.Bbs">
		UPDATE bbs SET goodsno = null WHERE goodsno =
		#{goodsno};
	</update>
	<update id="updateItem_imgs"
		parameterType="kr.co.poppy.model.Imgs">
		UPDATE imgs SET goodsno = null WHERE goodsno =
		#{goodsno};
	</update>
	<delete id="deleteItem_cart"
		parameterType="kr.co.poppy.model.Cart">
		DELETE FROM cart WHERE gddetailno IN(SELECT gddetailno
		FROM goodsdetail
		WHERE goodsno = #{goodsno});
	</delete>
	<delete id="deleteItem_gd"
		parameterType="kr.co.poppy.model.Goodsdetail">
		DELETE FROM goodsdetail WHERE goodsno = #{goodsno};
	</delete>
	<delete id="deleteItem_heart"
		parameterType="kr.co.poppy.model.Heart">
		DELETE FROM heart WHERE goodsno = #{goodsno};
	</delete>

	<!-- 상품 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem" parameterType="kr.co.poppy.model.Goods">
		DELETE FROM goods
		WHERE
		goodsno=#{goodsno}
	</delete>
</mapper>